section .text
global save_regs

struc regs_t
    .rax:   resq 1
    .rbx:   resq 1
    .rcx:   resq 1
    .rdx:   resq 1
    .rsi:   resq 1
    .rdi:   resq 1
    .rsp:   resq 1
    .rbp:   resq 1
    .r8:    resq 1
    .r9:    resq 1
    .r10:   resq 1
    .r11:   resq 1
    .r12:   resq 1
    .r13:   resq 1
    .r14:   resq 1
    .r15:   resq 1
    .rip:   resq 1

    .cs:    resw 1
    .ds:    resw 1
    .ss:    resw 1
    .es:    resw 1
    .fs:    resw 1
    .gs:    resw 1

    .rflags:    resq 1
    .cr3:       resq 1
endstruc

save_regs:
    pushfq ; Save the RFLAGS register on the stack
    mov [rdi+regs_t.rax], rax ; Save the general purpose registers
    mov [rdi+regs_t.rbx], rbx
    mov [rdi+regs_t.rcx], rcx
    mov [rdi+regs_t.rdx], rdx
    mov [rdi+regs_t.rsi], rsi
    mov [rdi+regs_t.rdi], rdi
    mov [rdi+regs_t.rsp], rsp
    mov [rdi+regs_t.rbp], rbp
    mov [rdi+regs_t.r8], r8
    mov [rdi+regs_t.r9], r9
    mov [rdi+regs_t.r10], r10
    mov [rdi+regs_t.r11], r11
    mov [rdi+regs_t.r12], r12
    mov [rdi+regs_t.r13], r13
    mov [rdi+regs_t.r14], r14
    mov [rdi+regs_t.r15], r15
    lea rax, [rip]   ; Load the address of the current instruction into rax
    mov [rdi+regs_t.rip], rax   ; Store rax in the rip member of the structure
    mov ax, cs ; Save the segment registers
    mov [rdi+regs_t.cs], ax
    mov ax, ds
    mov [rdi+regs_t.ds], ax
    mov ax, ss
    mov [rdi+regs_t.ss], ax
    mov ax, es
    mov [rdi+regs_t.es], ax
    mov ax, fs
    mov [rdi+regs_t.fs], ax
    mov ax, gs
    mov [rdi+regs_t.gs], ax
    mov [rdi+regs_t.rflags], [rsp] ; Save the RFLAGS register from the stack
    mov [rdi+regs_t.cr3], cr3 ; Save the CR3 register
    popfq ; Restore the RFLAGS register from the stack
    ret ; Return from the procedure